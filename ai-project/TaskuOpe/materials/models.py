# materials/models.py
import uuid
from django.db import models
from django.conf import settings
from django.utils.translation import gettext_lazy as _
from django.core.validators import MinValueValidator, MaxValueValidator

class Prompt(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    text = models.TextField()
    model = models.CharField(max_length=100)
    teacher = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'TEACHER'}
    )
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Prompt by {self.teacher.username} at {self.created_at.strftime('%Y-%m-%d')}"

class Material(models.Model):
    class MaterialType(models.TextChoices):
        TASK = 'tehtävä', 'Tehtävä'
        LEARNING_MATERIAL = 'oppimateriaali', 'Oppimateriaali'
        TEST = 'testi', 'Testi'
        EXAM = 'koe', 'Koe'
        VIDEO = 'video', 'Video'
        GAME = 'peli', 'Peli'

    class Status(models.TextChoices):
        DRAFT = 'DRAFT', 'Draft'
        PENDING_APPROVAL = 'PENDING', 'Pending Approval'
        APPROVED = 'APPROVED', 'Approved'
        REJECTED = 'REJECTED', 'Rejected'
        
    GRADE_CHOICES = [(str(i), f"{i}. luokka") for i in range(1, 10)]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    title = models.CharField(max_length=255)
    content = models.TextField(help_text="The raw content generated by the AI.")
    structured_content = models.JSONField(null=True, blank=True, help_text="Parsed content, e.g., quiz questions.")
    material_type = models.CharField(max_length=50, choices=MaterialType.choices, default=MaterialType.TASK)
    subject = models.CharField(max_length=100, null=True, blank=True)
    
    # --- THIS IS THE CRITICAL FIX ---
    # This field MUST be a CharField to have choices.
    grade_level = models.CharField(max_length=20, choices=GRADE_CHOICES, null=True, blank=True)
    
    audience = models.JSONField(null=True, blank=True, help_text="e.g., {'learning_styles': ['visual'], 'languages': ['en', 'fi']}")
    author = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='authored_materials', on_delete=models.CASCADE, limit_choices_to={'role': 'TEACHER'})
    prompt = models.ForeignKey(Prompt, on_delete=models.SET_NULL, null=True, blank=True)
    status = models.CharField(max_length=50, choices=Status.choices, default=Status.DRAFT)
    version = models.IntegerField(default=1)
    parent = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name='versions')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.title} (v{self.version})"
class MaterialRevision(models.Model):
    material = models.ForeignKey(Material, on_delete=models.CASCADE, related_name='revisions')
    version = models.IntegerField()
    editor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
    note = models.CharField(max_length=255, blank=True)
    diff = models.JSONField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']

# ==========================================================
# --- MODIFICATIONS START HERE ---
# ==========================================================
import uuid
from django.conf import settings
from django.db import models
from django.utils.translation import gettext_lazy as _
# if Material is in same file, ok; otherwise adjust import accordingly.
# from .models import Material  # jos tarvitset erillisestä moduulista

class Assignment(models.Model):
    class Status(models.TextChoices):
        ASSIGNED     = "ASSIGNED",     _("Annettu")
        IN_PROGRESS  = "IN_PROGRESS",  _("Kesken")
        SUBMITTED    = "SUBMITTED",    _("Palautettu")
        GRADED       = "GRADED",       _("Arvioitu")

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

    material = models.ForeignKey(
        Material,
        on_delete=models.CASCADE
    )

    student = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        related_name='assignments',
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'STUDENT'}
    )

    assigned_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        related_name='assigned_tasks',
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'TEACHER'}
    )

    due_at = models.DateTimeField(null=True, blank=True)

    # status (YKSI määrittely – max_length riittää 20:lle)
    status = models.CharField(
        max_length=20,
        choices=Status.choices,
        default=Status.ASSIGNED,
    )

    # Tallennetaan oppilaan luonnos ennen lopullista palautusta
    draft_response = models.TextField(blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        constraints = [
            # Estää duplikaattitehtävät samalle oppilaalle samasta materiaalista
            models.UniqueConstraint(
                fields=['material', 'student'],
                name='unique_assignment_per_student'
            ),
        ]
        indexes = [
            models.Index(fields=['status']),
            models.Index(fields=['due_at']),
            models.Index(fields=['student']),
            models.Index(fields=['assigned_by']),
        ]

    def __str__(self):
        return f"'{self.material.title}' for {self.student.username}"

# ==========================================================
# --- MODIFICATIONS END HERE ---
# ==========================================================

class Submission(models.Model):
    class Status(models.TextChoices):
        IN_PROGRESS = 'IN_PROGRESS', 'Kesken'
        SUBMITTED   = 'SUBMITTED',   'Palautettu'

    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False
    )

    assignment = models.ForeignKey(
        'materials.Assignment',
        on_delete=models.CASCADE,
        related_name='submissions'
    )
    student = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'STUDENT'}
    )

    status = models.CharField(
        max_length=20,
        choices=Status.choices,
        default=Status.SUBMITTED
    )

    # Numeroarvosana 4–10 (suomalainen asteikko)
    grade = models.IntegerField(
        null=True,
        blank=True,
        validators=[MinValueValidator(4), MaxValueValidator(10)],
        help_text="Numeroarvosana 4–10"
    )

    # Pisteet (esim. 17.0 / 20.0)
    score = models.DecimalField(
        max_digits=6,
        decimal_places=2,
        null=True,
        blank=True,
        help_text="Saadut pisteet"
    )
    max_score = models.DecimalField(
        max_digits=6,
        decimal_places=2,
        null=True,
        blank=True,
        help_text="Maksimipisteet"
    )

    feedback = models.TextField(
        blank=True,
        help_text="Opettajan palaute"
    )

    # Oppilaan kirjoittama vastaus
    response = models.TextField(blank=True)

    # Aikaleimat
    created_at = models.DateTimeField(auto_now_add=True)
    started_at = models.DateTimeField(auto_now_add=True)
    submitted_at = models.DateTimeField(null=True, blank=True)
    graded_at = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f"{self.student} → {self.assignment} ({self.get_status_display()})"
    
class PlagiarismReport(models.Model):
    submission = models.OneToOneField(Submission, on_delete=models.CASCADE, related_name="plagiarism_report")
    suspected_source = models.ForeignKey(Submission, null=True, blank=True, on_delete=models.SET_NULL, related_name="plagiarized_by")
    score = models.FloatField(default=0.0, help_text="Cosine similarity score between submissions")
    highlights = models.TextField(blank=True, help_text="Highlighted overlapping text segments in HTML or JSON format")
    created_at = models.DateTimeField(auto_now_add=True)

class Rubric(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    material = models.ForeignKey(Material, on_delete=models.CASCADE, related_name='rubrics')
    title = models.CharField(max_length=200, default="Oletusrubriikki")
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

class RubricCriterion(models.Model):
    rubric = models.ForeignKey(Rubric, on_delete=models.CASCADE, related_name='criteria')
    name = models.CharField(max_length=200)
    max_points = models.PositiveIntegerField(default=5)
    guidance = models.TextField(blank=True)
    order = models.PositiveSmallIntegerField(default=0)

class AIGrade(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    submission = models.OneToOneField(Submission, on_delete=models.CASCADE, related_name='ai_grade')
    rubric = models.ForeignKey(Rubric, on_delete=models.SET_NULL, null=True)
    model_name = models.CharField(max_length=100, default="gpt-4o-mini")
    total_points = models.FloatField(default=0)
    details = models.JSONField(default=dict, blank=True)  # {"criteria":[{"name","points","max","feedback"}], "general_feedback":""}
    teacher_confirmed = models.BooleanField(default=False)
    teacher_notes = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

