# materials/models.py
import uuid
from django.db import models
from django.conf import settings

class Prompt(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    text = models.TextField()
    model = models.CharField(max_length=100)
    teacher = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'TEACHER'}
    )
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Prompt by {self.teacher.username} at {self.created_at.strftime('%Y-%m-%d')}"

class Material(models.Model):
    class MaterialType(models.TextChoices):
        QUIZ = 'QUIZ', 'Quiz'
        GAME = 'GAME', 'Game'
        IMAGE = 'IMAGE', 'Image'
        VIDEO = 'VIDEO', 'Video'
        LESSON = 'LESSON', 'Lesson'

    class Status(models.TextChoices):
        DRAFT = 'DRAFT', 'Draft'
        PENDING_APPROVAL = 'PENDING', 'Pending Approval'
        APPROVED = 'APPROVED', 'Approved'
        REJECTED = 'REJECTED', 'Rejected'

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    title = models.CharField(max_length=255)
    content = models.TextField(help_text="The raw content generated by the AI.")
    structured_content = models.JSONField(null=True, blank=True, help_text="Parsed content, e.g., quiz questions.")
    material_type = models.CharField(max_length=50, choices=MaterialType.choices)
    subject = models.CharField(max_length=100, null=True, blank=True)
    grade_level = models.IntegerField(null=True, blank=True)
    
    # --- FIX 1: Added the missing 'audience' field from the diagram ---
    audience = models.JSONField(null=True, blank=True, help_text="e.g., {'learning_styles': ['visual'], 'languages': ['en', 'fi']}")
    
    author = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        related_name='authored_materials',
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'TEACHER'}
    )
    prompt = models.ForeignKey(Prompt, on_delete=models.SET_NULL, null=True, blank=True)
    
    status = models.CharField(max_length=50, choices=Status.choices, default=Status.DRAFT)
    version = models.IntegerField(default=1)
    parent = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name='versions')

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.title} (v{self.version})"

class MaterialRevision(models.Model):
    material = models.ForeignKey(Material, on_delete=models.CASCADE, related_name='revisions')
    version = models.IntegerField()
    editor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
    note = models.CharField(max_length=255, blank=True)
    diff = models.JSONField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']

class Assignment(models.Model):
    class Status(models.TextChoices):
        ASSIGNED = 'ASSIGNED', 'Assigned'
        SUBMITTED = 'SUBMITTED', 'Submitted'
        GRADED = 'GRADED', 'Graded'
        RETURNED = 'RETURNED', 'Returned'

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    material = models.ForeignKey(Material, on_delete=models.CASCADE)
    student = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        related_name='assignments',
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'STUDENT'}
    )
    assigned_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        related_name='assigned_tasks',
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'TEACHER'}
    )
    due_at = models.DateTimeField(null=True, blank=True)
    status = models.CharField(max_length=50, choices=Status.choices, default=Status.ASSIGNED)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"'{self.material.title}' for {self.student.username}"

class Submission(models.Model):
    class Status(models.TextChoices):
        IN_PROGRESS = 'IN_PROGRESS', 'In Progress'
        SUBMITTED = 'SUBMITTED', 'Submitted'

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    
    # --- FIX 2: Changed from OneToOneField to ForeignKey to match diagram and allow resubmissions ---
    assignment = models.ForeignKey(Assignment, on_delete=models.CASCADE, related_name='submissions')

    student = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        limit_choices_to={'role': 'STUDENT'}
    )
    response = models.JSONField(null=True, blank=True)
    score = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    feedback = models.TextField(blank=True)
    status = models.CharField(max_length=50, choices=Status.choices, default=Status.IN_PROGRESS)
    started_at = models.DateTimeField(auto_now_add=True)
    submitted_at = models.DateTimeField(null=True, blank=True)